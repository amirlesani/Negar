#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace negar
{
    using System.Data.Linq;
    using System.Data.Linq.Mapping;
    using System.Data;
    using System.Collections.Generic;
    using System.Reflection;
    using System.Linq;
    using System.Linq.Expressions;
    using System.ComponentModel;
    using System;
    using System.Data.SqlClient;

    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Mali")]
	public partial class DaftarModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDaftarTable(DaftarTable instance);
    partial void UpdateDaftarTable(DaftarTable instance);
    partial void DeleteDaftarTable(DaftarTable instance);
    #endregion
		
		public DaftarModelDataContext() : 
				base(global::negar.Properties.Settings.Default.MaliConnectionString, mappingSource)
		{
			OnCreated();
		}
        partial void OnCreated()
        {
            CommandTimeout = 5 * 60;
        }

        public void BulkInsertAll<T>(IEnumerable<T> entities)
        {
            entities = entities.ToArray();

            string cs = Connection.ConnectionString;
            var conn = new SqlConnection(cs);
            conn.Open();

            Type t = typeof(T);

            var tableAttribute = (TableAttribute)t.GetCustomAttributes(
                typeof(TableAttribute), false).Single();
            var bulkCopy = new SqlBulkCopy(conn)
            {
                DestinationTableName = tableAttribute.Name
            };

            var properties = t.GetProperties().Where(EventTypeFilter).ToArray();
            var table = new DataTable();

            foreach (var property in properties)
            {
                Type propertyType = property.PropertyType;
                if (propertyType.IsGenericType &&
                    propertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    propertyType = Nullable.GetUnderlyingType(propertyType);
                }

                table.Columns.Add(new DataColumn(property.Name, propertyType));
            }

            foreach (var entity in entities)
            {
                table.Rows.Add(properties.Select(
                  property => GetPropertyValue(
                  property.GetValue(entity, null))).ToArray());
            }

            bulkCopy.WriteToServer(table);
            conn.Close();
        }

        private bool EventTypeFilter(System.Reflection.PropertyInfo p)
        {
            var attribute = Attribute.GetCustomAttribute(p,
                typeof(AssociationAttribute)) as AssociationAttribute;

            if (attribute == null) return true;
            if (attribute.IsForeignKey == false) return true;

            return false;
        }

        private object GetPropertyValue(object o)
        {
            if (o == null)
                return DBNull.Value;
            return o;
        }
        public DaftarModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DaftarModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DaftarModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DaftarModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DaftarTable> DaftarTables
		{
			get
			{
				return this.GetTable<DaftarTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DaftarTable")]
	public partial class DaftarTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _Refund;
		
		private System.Nullable<long> _BillDetailCode;
		
		private string _Date;
		
		private string _PlaceName;
		
		private string _AccountType;
		
		private string _DepositOwnerDetail;
		
		private System.Nullable<long> _DepositDetail;
		
		private System.Nullable<long> _Deposit;
		
		private System.Nullable<long> _CodeBudget;
		
		private System.Nullable<long> _CityID;
		
		private System.Nullable<long> _RealDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnRefundChanging(System.Nullable<long> value);
    partial void OnRefundChanged();
    partial void OnBillDetailCodeChanging(System.Nullable<long> value);
    partial void OnBillDetailCodeChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnPlaceNameChanging(string value);
    partial void OnPlaceNameChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnDepositOwnerDetailChanging(string value);
    partial void OnDepositOwnerDetailChanged();
    partial void OnDepositDetailChanging(System.Nullable<long> value);
    partial void OnDepositDetailChanged();
    partial void OnDepositChanging(System.Nullable<long> value);
    partial void OnDepositChanged();
    partial void OnCodeBudgetChanging(System.Nullable<long> value);
    partial void OnCodeBudgetChanged();
    partial void OnCityIDChanging(System.Nullable<long> value);
    partial void OnCityIDChanged();
    partial void OnRealDateChanging(System.Nullable<long> value);
    partial void OnRealDateChanged();
    #endregion
		
		public DaftarTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Refund", DbType="BigInt")]
		public System.Nullable<long> Refund
		{
			get
			{
				return this._Refund;
			}
			set
			{
				if ((this._Refund != value))
				{
					this.OnRefundChanging(value);
					this.SendPropertyChanging();
					this._Refund = value;
					this.SendPropertyChanged("Refund");
					this.OnRefundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillDetailCode", DbType="BigInt")]
		public System.Nullable<long> BillDetailCode
		{
			get
			{
				return this._BillDetailCode;
			}
			set
			{
				if ((this._BillDetailCode != value))
				{
					this.OnBillDetailCodeChanging(value);
					this.SendPropertyChanging();
					this._BillDetailCode = value;
					this.SendPropertyChanged("BillDetailCode");
					this.OnBillDetailCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(MAX)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceName", DbType="NVarChar(MAX)")]
		public string PlaceName
		{
			get
			{
				return this._PlaceName;
			}
			set
			{
				if ((this._PlaceName != value))
				{
					this.OnPlaceNameChanging(value);
					this.SendPropertyChanging();
					this._PlaceName = value;
					this.SendPropertyChanged("PlaceName");
					this.OnPlaceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountType", DbType="NVarChar(MAX)")]
		public string AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositOwnerDetail", DbType="NVarChar(MAX)")]
		public string DepositOwnerDetail
		{
			get
			{
				return this._DepositOwnerDetail;
			}
			set
			{
				if ((this._DepositOwnerDetail != value))
				{
					this.OnDepositOwnerDetailChanging(value);
					this.SendPropertyChanging();
					this._DepositOwnerDetail = value;
					this.SendPropertyChanged("DepositOwnerDetail");
					this.OnDepositOwnerDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositDetail", DbType="BigInt")]
		public System.Nullable<long> DepositDetail
		{
			get
			{
				return this._DepositDetail;
			}
			set
			{
				if ((this._DepositDetail != value))
				{
					this.OnDepositDetailChanging(value);
					this.SendPropertyChanging();
					this._DepositDetail = value;
					this.SendPropertyChanged("DepositDetail");
					this.OnDepositDetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deposit", DbType="BigInt")]
		public System.Nullable<long> Deposit
		{
			get
			{
				return this._Deposit;
			}
			set
			{
				if ((this._Deposit != value))
				{
					this.OnDepositChanging(value);
					this.SendPropertyChanging();
					this._Deposit = value;
					this.SendPropertyChanged("Deposit");
					this.OnDepositChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeBudget", DbType="BigInt")]
		public System.Nullable<long> CodeBudget
		{
			get
			{
				return this._CodeBudget;
			}
			set
			{
				if ((this._CodeBudget != value))
				{
					this.OnCodeBudgetChanging(value);
					this.SendPropertyChanging();
					this._CodeBudget = value;
					this.SendPropertyChanged("CodeBudget");
					this.OnCodeBudgetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="BigInt")]
		public System.Nullable<long> CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealDate", DbType="BigInt")]
		public System.Nullable<long> RealDate
		{
			get
			{
				return this._RealDate;
			}
			set
			{
				if ((this._RealDate != value))
				{
					this.OnRealDateChanging(value);
					this.SendPropertyChanging();
					this._RealDate = value;
					this.SendPropertyChanged("RealDate");
					this.OnRealDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
